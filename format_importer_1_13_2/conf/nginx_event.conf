#########
# nginx_event参数文件
#
# 请先阅读format importer使用文档之后再填写此配置！
# https://www.sensorsdata.cn/manual/format_importer.html
#########

#########
# 以下是公共参数，说明参考https://www.sensorsdata.cn/manual/format_importer.html#42-%E5%85%AC%E5%85%B1%E5%8F%82%E6%95%B0
########

# 下面两个参数选一个必填
# 发送数据的 url, 获取方式参考https://www.sensorsdata.cn/manual/format_importer.html#21-%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%E6%8E%A5%E6%94%B6%E5%9C%B0%E5%9D%80, 注意这个参数和--output_file不能同时使用
url: http://localhost:8106/sa

# 输出的文件名，输出每行是一个符合格式的json。注意这个参数和--url不可同时使用
# output_file: ./sa.log

# 可选参数, 指定的project名，默认是default
# project: default

# 可选参数，第一次运行请忽略，如果运行失败，需要跳过成功的那集行，这个就是指定跳过几行的。
# skip_cnt: 10

# 可选参数，如果指定了就是使用debug模式，不会导入数据，只在stdout显示数据，参见https://www.sensorsdata.cn/manual/debug_mode.html
debug

# 可选参数，如果选中，则出现一条错误日志就会退出
# quit_on_error

# 必填参数，从哪个字段作为 distinct_id，如果指定，则每条数据算作对应字段的用户的行为。
distinct_id_from: user_id

# 可选参数, distinct_id是否是login id，默认不是.
# is_login

# 下面两个参数选一个必填
# 哪个字段作为 event 名，如果指定，则每条数据的事件名为对应字段的值。
event_from: __request_param_action
# 默认的 event 名，如果指定，则将所有数据都算作这个 event 的。
# event_default: UserBuy

# 可选参数 哪个字段作为 time, 如果指定，则每条数据对应的时间为对应字段的值。
timestamp_from: time_local

# 可选参数 默认的 timestamp, 如果指定，则将所有数据都算作这个时间的事件。
# timestamp_default: 2010-04-03 00:00:00

# 可选参数 和 timestamp_from 一起使用，如果指定，并 timestamp_from 对应的字段是个字符串，可以通过这种方式指定时间格式。默认是%Y-%m-%d %H:%M:%S。
timestamp_format: %d/%b/%Y:%H:%M:%S %z


#########
# 以下是导入nginx的其他参数，说明参考https://www.sensorsdata.cn/manual/format_importer.html#44-%E5%AF%BC%E5%85%A5-nginx-%E6%97%A5%E5%BF%97%E7%9A%84%E5%85%B6%E4%BB%96%E5%8F%82%E6%95%B0
########

# 必填参数，nginx 日志文件路径
filename: ./examples/events.log

# 必填参数，nginx 日志配置，类似'"$remote_addr" "$time_local" "$http_refer" "$status"'。
log_format: $remote_addr [$time_local] "$request" $status $bytes_sent "$http_user_agent" "$http_referer" "$title" "$user_id"

# 必填参数，用逗号分割选取的 property, 举例--property_list http_refer,status将会将httprefer和status两列作为 property 导入。
property_list: __request_param_id,title

# 可选参数，用逗号分割property的对应名称, 需要和--property_list一一对应
property_list_cnames: item_id,item_name

# 可选参数，对应的列将不会做自动类型判断，举例--skip_identify request_user,status将会将 request_user, status 不做类型判断，完全作为 string 导入。如果不填写则表示全部的选中列都会自动做类型判断。
# skip_identify: request_user,status

# 可选参数，对应的列将作为url解析，用逗号分割。解析后会生成__<字段名>_<解析内容>这样命名的property,解析内容包括netloc, path, query, param_<参数名>。举例对于$my_url字段值为http://www.abc.com/path/to/mine?k1=v1&k2=2,会解析为{"__my_url_netloc": "www.abc.com","__my_url_path": "/path/to/mine", "__my_url_query":"k1=v1&k2=v", "__my_url_param_k1": "v1","__my_url_param_k2":2}。注意可以再 property_list 配置这些字段。默认是"http_referer"。
# url_fields: http_referer

# 可选参数，过滤对应的 path ，可多选。这里的 path 取的是 $request的path。支持正则。举例 --filter_path '.*\.gif' --filter_path '/index\.html' 将过滤对 gif 的请求和 index 的请求。
# filter_path: '.*\.gif'
# filter_path: '/index\.html'

# 可选参数，只对 event 有效, 哪个字段作为 ip, 如果指定，则每条数据对应的 ip 为对应字段的值, 默认是$remote_addr
# ip_from: $remote_addr

# 可选参数，指定某些值为空，比如指定 --ignore_value null 则所有的null都被认为是空值
# ignore_value: null
